#include "../common/stdlib.func";
#include "../common/utils.func";
#include "../common/messages.func";
#include "base/constants.fc";
#include "base/user-sale-storage.fc";

(cell) empty_body() impure {
    return begin_cell().end_cell();
}

() send_remain_gas(slice receiver, cell body) impure {
    return send_message_nobounce(0, receiver, body, CARRY_REMAINING_GAS | IGNORE_ERRORS);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }

    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee

    load_data();

    (int op, _) = (in_msg_body~load_uint(32), in_msg_body~load_uint(64));

    throw_unless(ERR_NOT_MASTER, sender_address.equal_slices(storage::market_master));

    if (op == OP_SELL) {
        throw_unless(ERR_ITEM_ALREADY_SALE, storage::active == false);
        storage::price = in_msg_body~load_coins();
        storage::receiver = in_msg_body~load_msg_addr();
        storage::active = true;
        save_data();
        return send_remain_gas(storage::receiver, empty_body());
    }

    if (op == OP_UPDATE_PRICE) {
        int price = in_msg_body~load_coins();
        slice sender = in_msg_body~load_msg_addr();
        int result_op = OP_UPDATE_PRICE_FAILD;
        if (storage::active) {
            result_op = OP_UPDATE_PRICE_SUCCESS;
            storage::price = price;
            save_data();
        }

        cell response = begin_cell()
            .store_uint(result_op, 32)
            .store_uint(0, 64)
            .store_uint(storage::item_id, 64)
            .store_coins(storage::price)
            .store_slice(sender)
            .end_cell();

        return send_remain_gas(sender_address, response);
    }

    if (op == OP_UPDATE_RECEIVER) {
        throw_unless(ERR_ITEM_INACTIVE, storage::active);
        storage::receiver = in_msg_body~load_msg_addr();
        save_data();
        return send_remain_gas(storage::receiver, empty_body());
    }

    if (op == OP_CANCEL) {
        slice sender = in_msg_body~load_msg_addr();
        int result_op = OP_CANCEL_FAILED;
        if (storage::active) {
            result_op = OP_CANCEL_SUCCESS;
            storage::active = false;
            save_data();
        }

        cell response = begin_cell()
            .store_uint(result_op, 32)
            .store_uint(0, 64)
            .store_uint(storage::item_id, 64)
            .store_slice(sender)
            .end_cell();

        return send_remain_gas(sender_address, response);
    }

    if (op == OP_BUY) {
        int user_id = in_msg_body~load_uint(64);
        slice sender = in_msg_body~load_msg_addr();
        int value = in_msg_body~load_coins();
        int value_valid = value == storage::price;
        int result_op = OP_BUY_FAIL;
        if (storage::active & value_valid) {
            result_op = OP_BUY_SUCCESS;
            storage::active = false;
            storage::user_bought = user_id;
        }

        save_data();

        cell response = begin_cell()
            .store_uint(result_op, 32)
            .store_uint(0, 64)
            .store_uint(storage::item_id, 64)
            .store_uint(user_id, 64)
            .store_coins(value)
            .store_slice(sender)
            .store_slice(storage::receiver)
            .end_cell();

        send_remain_gas(sender_address, response);
    }

    if (op == OP_UPGRADE) {
        set_code(in_msg_body~load_ref());
        return ();
    }
}

(slice, int, int, int, int) get_sale_info() method_id {
    load_data();
    return (
        storage::receiver,
        storage::item_id,
        storage::active,
        storage::user_bought,
        storage::price
    );
}
