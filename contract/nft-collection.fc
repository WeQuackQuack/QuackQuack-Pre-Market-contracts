;; NFT collection smart contract

#include "../common/stdlib.func";
#include "../common/op-codes.fc";
#include "../common/params.fc";
#include "../common/messages.func";
#include "utils/collection-storage.fc";
#include "utils/constants.fc";
#include "../common/utils.func";

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(nft_content);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
        .store_slice(to_address)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::report_royalty_params(), 32)
        .store_uint(query_id, 64)
        .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_data();

    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, storage::royalty_params.begin_parse());
        return ();
    }

    if (op == OP_MINT_NFT) {
        (slice payload, int success) = storage::minters.udict_get?(256, slice_hash(sender_address));
        throw_unless(ERR_NOT_MINTER, success & (payload.equal_slices(sender_address)));

        var nft_id = in_msg_body~load_uint(64);
        deploy_nft_item(nft_id, storage::nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref());
        if (nft_id > storage::next_item_index) {
            storage::next_item_index = nft_id;
        }
        save_data();
        return ();
    }

    if (op == OP_MINT_NFT_AUTO) {
        (slice payload, int success) = storage::minters.udict_get?(256, slice_hash(sender_address));
        throw_unless(ERR_NOT_MINTER, success & (payload.equal_slices(sender_address)));
        storage::next_item_index += 1;
        int item_index = storage::next_item_index;
        int amount = in_msg_body~load_coins();
        slice receiver = in_msg_body~load_msg_addr();
        cell uri_content = begin_cell()
            .store_slice(convert_int_to_string(item_index))
            .end_cell();
        cell nft_content = begin_cell()
            .store_slice(receiver)
            .store_ref(uri_content)
            .end_cell();
        deploy_nft_item(item_index, storage::nft_item_code, amount, nft_content);
        save_data();
        return ();
    }

    throw_unless(ERR_NOT_OWNER, equal_slices(sender_address, storage::owner_address));

    if (op == OP_UPGRADE) {
        cell code = in_msg_body~load_ref();
        set_code(code);
        return ();
    }

    if (op == OP_WITHDRAW_TON) {
        send_simple_message(0, sender_address, begin_cell().end_cell(), CARRY_ALL_BALANCE | IGNORE_ERRORS);
        return ();
    }

    if (op == OP_SET_MINTER) {
        slice user = in_msg_body~load_msg_addr();
        int active = in_msg_body~load_uint(1);
        if (active) {
            storage::minters~udict_set(256, slice_hash(user), user);
        } else {
            storage::minters~udict_delete?(256, slice_hash(user));
        }
        save_data();
        return ();
    }

    if (op == 2) {
        ;; batch deploy of new nfts
        int counter = 0;
        cell deploy_list = in_msg_body~load_ref();
        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) {
                    ;; Limit due to limits of action list size
                    throw(399);
                }

                throw_unless(403 + counter, item_index <= storage::next_item_index);
                deploy_nft_item(item_index, storage::nft_item_code, item~load_coins(), item~load_ref());
                if (item_index == storage::next_item_index) {
                    storage::next_item_index += 1;
                }
            }
        } until (~ f?);
        save_data();
        return ();
    }

    if (op == 3) {
        ;; change owner
        storage::owner_address = in_msg_body~load_msg_addr();
        save_data();
        return ();
    }
    throw(0xffff);
}

;; Get methods
(int, cell, slice) get_collection_data() method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    return (storage::next_item_index, cs~load_ref(), storage::owner_address);
}

slice get_nft_address_by_index(int index) method_id {
    load_data();
    cell state_init = calculate_nft_item_state_init(index, storage::nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    load_data();
    slice rs = storage::royalty_params.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    load_data();
    slice cs = storage::content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
        .store_uint(1, 8) ;; offchain tag
        .store_slice(common_content)
        .store_ref(individual_nft_content)
        .end_cell());
}
